import io.customer.shared.sdk.meta.IdentityType;
import io.customer.shared.tracking.api.model.TrackingErrorReason;
import io.customer.shared.tracking.constant.QueueTaskStatus;
import kotlinx.datetime.Instant;

CREATE TABLE IF NOT EXISTS trackingTask (
  uuid TEXT NOT NULL ,
  siteId TEXT NOT NULL,
  type TEXT NOT NULL,
  createdAt INTEGER AS Instant NOT NULL,
  updatedAt INTEGER AS Instant NOT NULL,
  -- time after which the event may be removed without sending to the server
  expiresAt INTEGER AS Instant DEFAULT NULL,
  -- time after which the event can be deleted locally, this can be helpful in keeping logs for
  -- remote debugging in future
  stalesAt INTEGER AS Instant DEFAULT NULL,
  identity TEXT,
  identityType TEXT AS IdentityType,
  activityJson TEXT NOT NULL,
  activityModelVersion INTEGER,
  queueTaskStatus TEXT AS QueueTaskStatus NOT NULL,
  priority INTEGER NOT NULL DEFAULT 0,
  retryCount INTEGER NOT NULL DEFAULT 0,
  statusCode INTEGER DEFAULT NULL,
  errorReason TEXT AS TrackingErrorReason DEFAULT NULL,
  PRIMARY KEY (uuid, siteId, type)
);

-- INSERTIONS AND UPDATIONS

insertOrReplaceTask:
INSERT OR REPLACE INTO trackingTask (uuid, siteId, type, createdAt, updatedAt, expiresAt, stalesAt, identity, identityType, activityJson, activityModelVersion, queueTaskStatus, priority)
VALUES (?, ?, ?,?, ?,?, ?,?, ?,?, ?,?, ?);

updateAllAnonymousTasks:
UPDATE trackingTask SET updatedAt = :updatedAt, identity = :identifier, identityType = :identityType
WHERE (identity IS NULL OR identity == '') AND siteId == :siteId;

updateTasksStatus:
UPDATE trackingTask SET updatedAt = :updatedAt, queueTaskStatus = :status
WHERE uuid IN :ids AND siteId == :siteId;

updateSuccessfulTaskStatus:
UPDATE trackingTask SET updatedAt = :updatedAt, queueTaskStatus = :status, statusCode = :statusCode, errorReason = :errorReason
WHERE uuid IN :ids AND siteId == :siteId;

updateFailedTaskStatus:
UPDATE trackingTask SET updatedAt = :updatedAt, queueTaskStatus = :status, retryCount = retryCount + 1, statusCode = :statusCode, errorReason = :errorReason
WHERE uuid IN :ids AND siteId == :siteId;

-- DELETIONS

clearTable:
DELETE FROM trackingTask;

clearAllTasks:
DELETE FROM trackingTask
WHERE siteId == :siteId;

clearAllTasksWithStatus:
DELETE FROM trackingTask
WHERE queueTaskStatus IN :status AND siteId == :siteId;

-- SELECTIONS

selectAllPendingTasks:
SELECT * FROM trackingTask
WHERE queueTaskStatus IN :status AND (identity IS NOT NULL OR identity == '') AND siteId == :siteId
ORDER BY priority, createdAt
LIMIT :limit;

selectByType:
SELECT * FROM trackingTask
WHERE type == :type AND siteId == :siteId;

selectByPrimaryKey:
SELECT * FROM trackingTask
WHERE uuid == :id AND siteId == :siteId;
