import io.customer.shared.sdk.meta.IdentityType;
import io.customer.shared.tracking.api.model.TrackingErrorReason;
import io.customer.shared.tracking.constant.QueueTaskStatus;
import kotlinx.datetime.Instant;

-- TABLE CREATIONS
-- Any updates in the table should only be done with proper migrations

CREATE TABLE IF NOT EXISTS trackingTask (
  uuid TEXT NOT NULL,
  siteId TEXT NOT NULL,
  type TEXT NOT NULL,
  createdAt INTEGER AS Instant NOT NULL,
  updatedAt INTEGER AS Instant NOT NULL,
  identity TEXT,
  identityType TEXT AS IdentityType,
  activityJson TEXT NOT NULL,
  activityModelVersion INTEGER,
  queueTaskStatus TEXT AS QueueTaskStatus NOT NULL,
  priority INTEGER NOT NULL DEFAULT 0,
  retryCount INTEGER NOT NULL DEFAULT 0,
  statusCode INTEGER DEFAULT NULL,
  errorReason TEXT AS TrackingErrorReason DEFAULT NULL,
  PRIMARY KEY (uuid)
);

-- INSERTIONS AND UPDATIONS
-- All insertion queries must include [siteId], [createdAt] and [updatedAt]
-- All updatation queries must include [updatedAt]

insertOrReplaceTask:
INSERT OR REPLACE INTO trackingTask (uuid, siteId, type, createdAt, updatedAt, identity, identityType, activityJson, activityModelVersion, queueTaskStatus, priority)
VALUES (?, ?, ?,?, ?,?,  ?,?, ?,?, ?);

updateAllAnonymousTasks:
UPDATE trackingTask SET updatedAt = :updatedAt, identity = :identifier, identityType = :identityType
WHERE (identity IS NULL OR identity == '') AND siteId == :siteId;

updateTasksStatus:
UPDATE trackingTask SET updatedAt = :updatedAt, queueTaskStatus = :status
WHERE uuid IN :ids AND siteId == :siteId;

updateTaskStatusFromResponse:
UPDATE trackingTask SET updatedAt = :updatedAt, queueTaskStatus = :status, statusCode = :statusCode, errorReason = :errorReason, retryCount = retryCount + :retryAttempts
WHERE uuid IN :ids AND siteId == :siteId;

-- DELETIONS

clearAllTasksWithStatus:
DELETE FROM trackingTask
WHERE queueTaskStatus IN :status AND siteId == :siteId;

-- SELECTIONS

selectAllPendingTasks:
SELECT * FROM trackingTask
WHERE queueTaskStatus IN :status AND (identity IS NOT NULL OR identity == '') AND siteId == :siteId
ORDER BY priority DESC, createdAt ASC
LIMIT :limit;

selectByType:
SELECT * FROM trackingTask
WHERE type == :type AND siteId == :siteId;
